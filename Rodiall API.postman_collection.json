{
	"info": {
		"_postman_id": "a8cfa774-b43d-4903-ba5c-64eae3dbc088",
		"name": "Rodiall API",
		"description": "Device financing API that allows you to Buy a MiFi and Pay it back gradually through your data subscriptions.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46117770",
		"_collection_link": "https://fbistech.postman.co/workspace/QA-AUTOMATION~cd7866fc-511c-4d0e-bfd7-73927b00c3e2/collection/46117770-a8cfa774-b43d-4903-ba5c-64eae3dbc088?action=share&source=collection_link&creator=46117770"
	},
	"item": [
		{
			"name": "Super Admin",
			"item": [
				{
					"name": "Login",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"postman.setEnvironmentVariable(\"token\", jsonData.data.accessToken);",
											"",
											"pm.test('Response status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Content-Type header is application/json', function () {",
											"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
											"})",
											"",
											"pm.test('Success field should be true', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.success).to.be.true;",
											"})",
											"",
											"pm.test('Data object contains user and accessToken properties', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.data).to.be.an('object');",
											"    pm.expect(responseData.data).to.have.property('user');",
											"    pm.expect(responseData.data).to.have.property('accessToken');",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\" : \"admin@rodiall.com\",\n    \"password\" : \"password\"\n} ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/auth/login",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "2FA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Response status code is 200', function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test('Response has the required fields - success and message', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.property('success');",
											"    pm.expect(responseData).to.have.property('message');",
											"})",
											"",
											"pm.test('Success is a boolean value', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"})",
											"",
											"pm.test('Message is a non-empty string', function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Message should not be empty');",
											"})",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"otp\" : \"111111\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/auth/2fa",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"auth",
										"2fa"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Audit Trail",
					"item": [
						{
							"name": "Get Audit Trails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Postman Test Script for Audit Trail API Response",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response should be JSON\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"Response should contain success: true\", function () {",
											"    pm.expect(jsonData).to.have.property(\"success\", true);",
											"});",
											"",
											"pm.test(\"Response should have a message\", function () {",
											"    pm.expect(jsonData).to.have.property(\"message\");",
											"    pm.expect(jsonData.message).to.equal(\"Audit Trails\");",
											"});",
											"",
											"",
											"pm.test(\"Data array should exist and contain objects\", function () {",
											"    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"array\");",
											"    pm.expect(jsonData.data.length).to.be.above(0);",
											"});",
											"",
											"if (jsonData.data.length > 0) {",
											"    pm.test(\"Each audit trail entry should have required properties\", function () {",
											"        jsonData.data.forEach(entry => {",
											"            pm.expect(entry).to.have.property(\"id\").that.is.a(\"number\");",
											"            pm.expect(entry).to.have.property(\"user\").that.is.a(\"string\");",
											"            pm.expect(entry).to.have.property(\"email\").that.is.a(\"string\");",
											"            pm.expect(entry).to.have.property(\"msisdn\").that.is.a(\"string\");",
											"            pm.expect(entry).to.have.property(\"event\").that.is.a(\"string\");",
											"            pm.expect(entry).to.have.property(\"action\").that.is.a(\"string\");",
											"            pm.expect(entry).to.have.property(\"description\").that.is.a(\"string\");",
											"            pm.expect(entry).to.have.property(\"details\").that.is.a(\"string\");",
											"            pm.expect(entry).to.have.property(\"ipAddress\").that.is.a(\"string\");",
											"            pm.expect(entry).to.have.property(\"userAgent\").that.is.a(\"string\");",
											"            pm.expect(entry).to.have.property(\"createdAt\").that.is.a(\"string\");",
											"        });",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/super-admins/audit-trails",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"super-admins",
										"audit-trails"
									],
									"query": [
										{
											"key": "startDate",
											"value": "2025-08-01",
											"disabled": true
										},
										{
											"key": "endDate",
											"value": "2025-08-22",
											"disabled": true
										},
										{
											"key": "search",
											"value": "1-747-730-2499",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Audit Trail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Postman Test Script for Audit Trail API Response",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/super-admins/audit-trails/download",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"super-admins",
										"audit-trails",
										"download"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Settings",
					"item": [
						{
							"name": "SMTP",
							"item": [
								{
									"name": "SMTP Settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Postman Test Script for Audit Trail API Response",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response should be JSON\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Response should contain success: true\", function () {",
													"    pm.expect(jsonData).to.have.property(\"success\", true);",
													"});",
													"",
													"pm.test(\"Response should have a message\", function () {",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.equal(\"Settings updated\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"smtp_protocol\" : \"smtp\",\n    \"smtp_host\" : \"sandbox.smtp.mailtrap.io\",\n    \"smtp_port\" : \"587\",\n    \"smtp_username\" : \"ee0a7f742f14f7\",\n    \"smtp_password\" : \"b6faa89832c813\",\n    \"smtp_encryption\" : \"tls\",\n    \"mail_from_address\" : \"products@retailcode.com.ng\",\n    \"mail_from_name\" : \"Mobiwire\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/settings/smtp",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"settings",
												"smtp"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get SMTP Settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Postman Test Script for Audit Trail API Response",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response should be JSON\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Response should contain success: true\", function () {",
													"    pm.expect(jsonData).to.have.property(\"success\", true);",
													"});",
													"",
													"pm.test(\"Response should have a message\", function () {",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.equal(\"SMTP Settings\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/settings/smtp",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"settings",
												"smtp"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Basic Settings",
							"item": [
								{
									"name": "Basic Settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Postman Test Script for Audit Trail API Response",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response should be JSON\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Response should contain success: true\", function () {",
													"    pm.expect(jsonData).to.have.property(\"success\", true);",
													"});",
													"",
													"pm.test(\"Response should have a message\", function () {",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.equal(\"Settings updated\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"app_name\" : \"Rodiall\",\n    \"app_owner\" : \"Rodiall\",\n    \"app_country\" : \"NG\",\n    \"support_msisdn\" : [\"2348165940838\"],\n    \"support_email\" : [\"support@mobiwire.com\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/settings/basic",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"settings",
												"basic"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Basic Settings",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Postman Test Script for Audit Trail API Response",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response should be JSON\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Response should contain success: true\", function () {",
													"    pm.expect(jsonData).to.have.property(\"success\", true);",
													"});",
													"",
													"pm.test(\"Response should have a message\", function () {",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.equal(\"Settings updated\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v1/settings/basic",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"settings",
												"basic"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Data - PAYG",
							"item": [
								{
									"name": "Update PAYG Setup",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Postman Test Script for Audit Trail API Response",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response should be JSON\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Response should contain success: true\", function () {",
													"    pm.expect(jsonData).to.have.property(\"success\", true);",
													"});",
													"",
													"pm.test(\"Response should have a message\", function () {",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.equal(\"Settings updated\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"costPerGigabyteDaily\" : 500,\n    \"costPerGigabyteWeekly\": 600,\n    \"costPerGigabyteMonthly\": 700\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/settings/payg",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"settings",
												"payg"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get PAYG Setup",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Postman Test Script for Audit Trail API Response",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response should be JSON\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Response should contain success: true\", function () {",
													"    pm.expect(jsonData).to.have.property(\"success\", true);",
													"});",
													"",
													"pm.test(\"Response should have a message\", function () {",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.equal(\"PAYG Settings\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v1/settings/payg",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"settings",
												"payg"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bank Accounts",
							"item": [
								{
									"name": "Create Bank Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const randomNumber = _.random(1000000,9999999)\r",
													"pm.variables.set('randomNumber', randomNumber )\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accounts\": [\n        {\n            \"bank_account_name\": \"FBIS TECH\",\n            \"bank_account_number\": \"091{{randomNumber}}\",\n            \"bank_name\": \"{{$randomBankAccountName}}\",\n            \"currency\": \"NGN\",\n            \"bank_type\": \"NGN\"\n        },\n        {\n            \"bank_account_name\": \"FBIS TECH USD\",\n            \"bank_account_number\": \"1234567890\",\n            \"bank_name\": \"Zenith Bank USD\",\n            \"currency\": \"USD\",\n            \"bank_type\": \"USD\"\n        }\n    ]\n    \n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/settings/bank-account",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"settings",
												"bank-account"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Bank Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Bank Account Settings\");\r",
													"});\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/settings/bank-account/USD",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"settings",
												"bank-account",
												"USD"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Company",
					"item": [
						{
							"name": "Get Companies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Companies\");\r",
											"});\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/companies",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"companies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company Details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Company Retrieved Successfully\");\r",
											"});\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/companies/15",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"companies",
										"15"
									]
								}
							},
							"response": []
						},
						{
							"name": "Download Companies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/companies/download",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"companies",
										"download"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "RBAC",
					"item": [
						{
							"name": "Roles",
							"item": [
								{
									"name": "Get Roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"\r",
													"\r",
													"    pm.test(\"Body matches string\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"Company Management\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/api/v1/super-admins/roles",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"super-admins",
												"roles"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let response = pm.response.json();\r",
													"// Data object\r",
													"pm.environment.set(\"role_id\", response.data.id);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\" : \"{{$randomProductName}}\",\n    \"password\":\"password\",\n    \"permissions\" : [\n        {\"id\" : 1, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : true},\n        {\"id\" : 2, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : true},\n        {\"id\" : 3, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : true},\n        {\"id\" : 4, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : true}\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/super-admins/roles/create",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"super-admins",
												"roles",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Settings\");\r",
													"pm.test(\"Response time is less than 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/api/v1/super-admins/roles/4",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"super-admins",
												"roles",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 1000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Settings\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\" : 4,\n    \"name\" : \"{{$randomCompanyName}}\",\n    \"password\" :\"password\",\n    \"permissions\" : [\n        {\"id\" : 1, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : false},\n        {\"id\" : 2, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : true},\n        {\"id\" : 3, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : true},\n        {\"id\" : 9, \"canDelete\" : true, \"canAdd\" : false, \"canEdit\" : true, \"canRead\" : false},\n        {\"id\" : 4, \"canDelete\" : true, \"canAdd\" : true, \"canEdit\" : true, \"canRead\" : true}\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/super-admins/roles/update",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"super-admins",
												"roles",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 50000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"\r",
													"\r",
													"    pm.test(\"Body matches string\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"Role Deleted\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/super-admins/roles/{{role_id}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"super-admins",
												"roles",
												"{{role_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Admin",
							"item": [
								{
									"name": "Get Admins",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"\r",
													"    pm.test(\"Body matches string\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"Admins\");\r",
													"\r",
													"        pm.test(\"Response time is less than 20000ms\", function () {\r",
													"            pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"        });\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v1/super-admins/list",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"super-admins",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let response = pm.response.json();\r",
													"// Data object\r",
													"pm.environment.set(\"admin_id\", response.data.id);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"\r",
													"\r",
													"    pm.test(\"Body matches string\", function () {\r",
													"        pm.expect(pm.response.text()).to.include(\"Admin Created\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\" : \"{{$randomFullName}}\",\n    \"email\" : \"{{$randomEmail}}\",\n    \"role\" : 1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/super-admins/create",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"super-admins",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Admin Details updated\");\r",
													"});\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\" : {{admin_id}},\n    \"name\" : \"{{$randomFullName}}\",\n    \"email\" : \"{{$randomEmail}}\",\n    \"role\" : 5\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/super-admins/update",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"super-admins",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Admin Activated\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/super-admins/activate/2",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"super-admins",
												"activate",
												"2"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Admin Deleted\");\r",
													"});\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "password",
												"value": "password",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "password",
													"value": "password",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/super-admins/delete/{{admin_id}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"super-admins",
												"delete",
												"{{admin_id}}"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Deactivate Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Admin Deactivated\");\r",
													"});\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/super-admins/deactivate/2",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"super-admins",
												"deactivate",
												"2"
											],
											"query": [
												{
													"key": "",
													"value": null,
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create Permission",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"Permission Added Successfully\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"permission\" : \"{{$randomProductName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/super-admins/permissions/create",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"super-admins",
										"permissions",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Permissions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Permissions\");\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/super-admins/permissions",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"super-admins",
										"permissions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Enums",
					"item": [
						{
							"name": "Get Enums",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Deactivated\");\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Approved\");\r",
											"});\r",
											"});\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/enums/",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"enums",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Countries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Afghanistan\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Countries fetched successfully\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/enums/countries",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"enums",
										"countries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get States",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Adamawa\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"States\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/enums/states",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"enums",
										"states"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Cities",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Apapa\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Badagri\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/enums/cities/2671",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"enums",
										"cities",
										"2671"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Sectors",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Education\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Agriculture\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/enums/sectors",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"enums",
										"sectors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Batches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Batches\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Batch One\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/enums/batches",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"enums",
										"batches"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Devices",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Devices\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/enums/devices",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"enums",
										"devices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Company Types",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Company types fetched successfully\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/enums/company-types",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"enums",
										"company-types"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Modules",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Modules fetched successfully\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/enums/modules",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"enums",
										"modules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Dateformats",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Date formats fetched successfully\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/enums/dateformats",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"enums",
										"dateformats"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Timeformats",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Time formats fetched successfully\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/enums/timeformats",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"enums",
										"timeformats"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Timezones",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Time zones fetched successfully\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/enums/timezones",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"enums",
										"timezones"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Languages",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Languages fetched successfully\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/enums/languages",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"enums",
										"languages"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PAYG",
					"item": [
						{
							"name": "Rules",
							"item": [
								{
									"name": "Add Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let response = pm.response.json();",
													"// Data object",
													"pm.environment.set(\"rule_id\", response.data.id);",
													"",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"pm.test(\"Response has required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.all.keys('success', 'message', 'data');",
													"});",
													"",
													"pm.test(\"PAYG Rule created successfully\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.message).to.eql(\"PAYG Rule created successfully\");",
													"});",
													"",
													"pm.test(\"Validate the structure of the data object\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('success').that.is.a('boolean');",
													"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
													"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
													"",
													"    const data = responseData.data;",
													"    pm.expect(data).to.have.all.keys('id', 'ruleName', 'currency', 'description', 'status', 'assignee', 'tiers', 'dateCreated', 'lastModified');",
													"    ",
													"    pm.expect(data.id).to.be.a('number');",
													"    pm.expect(data.ruleName).to.be.a('string');",
													"    pm.expect(data.currency).to.be.a('string');",
													"    pm.expect(data.description).to.be.a('string');",
													"    pm.expect(data.status).to.be.a('string');",
													"    pm.expect(data.assignee).to.satisfy(value => value === null || typeof value === 'string');",
													"    pm.expect(data.tiers).to.be.an('array');",
													"",
													"    data.tiers.forEach(tier => {",
													"        pm.expect(tier).to.be.an('object');",
													"        pm.expect(tier).to.have.all.keys('validityPeriod', 'baseBundle', 'baseValue', 'markupPercent', 'chargeablePrice', 'calculation');",
													"        pm.expect(tier.validityPeriod).to.be.a('string');",
													"        pm.expect(tier.baseBundle).to.be.a('string');",
													"        pm.expect(tier.baseValue).to.be.a('string');",
													"        pm.expect(tier.markupPercent).to.be.a('number');",
													"        pm.expect(tier.chargeablePrice).to.be.a('string');",
													"        pm.expect(tier.calculation).to.be.a('string');",
													"    });",
													"",
													"    pm.expect(data.dateCreated).to.be.a('string');",
													"    pm.expect(data.lastModified).to.be.a('string');",
													"});",
													"",
													"",
													"pm.test(\"Tiers is an array with at least one element\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data.tiers).to.be.an('array').that.is.not.empty;",
													"});",
													"",
													"",
													"pm.test(\"Date fields are in a valid date format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data.dateCreated).to.exist.and.to.satisfy(date => !isNaN(Date.parse(date)), \"dateCreated is not in a valid date format\");",
													"    pm.expect(responseData.data.lastModified).to.exist.and.to.satisfy(date => !isNaN(Date.parse(date)), \"lastModified is not in a valid date format\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ruleName\": \"{{$randomCompanyName}}\",\n  \"currency\": \"NGN\",\n  \"description\": \"This rule defines tier-based pricing for premium subscriptions.\",\n  \"tiers\": [     {\n      \"validityPeriod\": \"365 days\",\n      \"baseBundle\": \"Pro Plan\",\n      \"baseValue\": 900,\n      \"markupPercent\": 20\n    }]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/payg/rules?password=password",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"payg",
												"rules"
											],
											"query": [
												{
													"key": "password",
													"value": "password"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Rules",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"",
													"",
													"",
													"pm.test(\"Response has the required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.all.keys('success', 'message', 'data');",
													"});",
													"",
													"pm.test(\"PAYG Rules\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.message).to.eql(\"PAYG Rules\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"dateCreated and lastModified are in a valid date format\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    ",
													"    responseData.data.forEach(function(rule) {",
													"        pm.expect(new Date(rule.dateCreated).getTime()).to.not.be.NaN;",
													"        pm.expect(new Date(rule.lastModified).getTime()).to.not.be.NaN;",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v1/payg/rules",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"payg",
												"rules"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Rule By Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"",
													"pm.test(\"PAYG Rule details\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.message).to.eql(\"PAYG Rule details\");",
													"});",
													"",
													"pm.test(\"Response has required fields: success, message, and data\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.all.keys('success', 'message', 'data');",
													"});",
													"",
													"",
													"pm.test(\"Validate the data object structure and types\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('success').that.is.a('boolean');",
													"    pm.expect(responseData).to.have.property('message').that.is.a('string');",
													"    pm.expect(responseData).to.have.property('data').that.is.an('object');",
													"    ",
													"    const data = responseData.data;",
													"    pm.expect(data).to.have.property('id').that.is.a('number');",
													"    pm.expect(data).to.have.property('ruleName').that.is.a('string');",
													"    pm.expect(data).to.have.property('currency').that.is.a('string');",
													"    pm.expect(data).to.have.property('description').that.is.a('string');",
													"    pm.expect(data).to.have.property('status').that.is.a('string');",
													"    pm.expect(data).to.have.property('assignee').that.satisfies(value => value === null || typeof value === 'string');",
													"    pm.expect(data).to.have.property('tiers').that.is.an('array');",
													"    ",
													"    data.tiers.forEach(tier => {",
													"        pm.expect(tier).to.be.an('object');",
													"        pm.expect(tier).to.have.property('validityPeriod').that.is.a('string');",
													"        pm.expect(tier).to.have.property('baseBundle').that.is.a('string');",
													"        pm.expect(tier).to.have.property('baseValue').that.is.a('string');",
													"        pm.expect(tier).to.have.property('markupPercent').that.is.a('number');",
													"        pm.expect(tier).to.have.property('chargeablePrice').that.is.a('string');",
													"        pm.expect(tier).to.have.property('calculation').that.is.a('string');",
													"    });",
													"    ",
													"    pm.expect(data).to.have.property('dateCreated').that.is.a('string');",
													"    pm.expect(data).to.have.property('lastModified').that.is.a('string');",
													"});",
													"",
													"",
													"pm.test(\"Tiers array is present and contains at least one element with valid fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.have.property('tiers').that.is.an('array').with.lengthOf.at.least(1);",
													"",
													"    responseData.data.tiers.forEach(tier => {",
													"        pm.expect(tier).to.be.an('object');",
													"        pm.expect(tier).to.have.all.keys('validityPeriod', 'baseBundle', 'baseValue', 'markupPercent', 'chargeablePrice', 'calculation');",
													"        pm.expect(tier.validityPeriod).to.be.a('string');",
													"        pm.expect(tier.baseBundle).to.be.a('string');",
													"        pm.expect(tier.baseValue).to.be.a('string');",
													"        pm.expect(tier.markupPercent).to.be.a('number');",
													"        pm.expect(tier.chargeablePrice).to.be.a('string');",
													"        pm.expect(tier.calculation).to.be.a('string');",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v1/payg/rules/{{rule_id}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"payg",
												"rules",
												"{{rule_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"",
													"pm.test(\"PAYG Rule updated successfully\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.message).to.eql(\"PAYG Rule updated successfully\");",
													"});",
													"",
													"pm.test(\"Response has required fields: success, message, and data\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.all.keys('success', 'message', 'data');",
													"});",
													"",
													"",
													"pm.test(\"Validate the structure of the data object\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.be.an('object').that.includes.keys('id', 'ruleName', 'currency', 'description', 'status', 'assignee', 'tiers', 'dateCreated', 'lastModified');",
													"    ",
													"    pm.expect(responseData.data.id).to.be.a('number');",
													"    pm.expect(responseData.data.ruleName).to.be.a('string');",
													"    pm.expect(responseData.data.currency).to.be.a('string');",
													"    pm.expect(responseData.data.description).to.be.a('string');",
													"    pm.expect(responseData.data.status).to.be.a('string');",
													"    pm.expect(responseData.data.assignee).to.satisfy(value => value === null || typeof value === 'string');",
													"    pm.expect(responseData.data.tiers).to.be.an('array');",
													"    pm.expect(responseData.data.dateCreated).to.be.a('string');",
													"    pm.expect(responseData.data.lastModified).to.be.a('string');",
													"    ",
													"    responseData.data.tiers.forEach(function(tier) {",
													"        pm.expect(tier).to.be.an('object').that.includes.keys('validityPeriod', 'baseBundle', 'baseValue', 'markupPercent', 'chargeablePrice', 'calculation');",
													"        pm.expect(tier.validityPeriod).to.be.a('string');",
													"        pm.expect(tier.baseBundle).to.be.a('string');",
													"        pm.expect(tier.baseValue).to.be.a('string');",
													"        pm.expect(tier.markupPercent).to.be.a('number');",
													"        pm.expect(tier.chargeablePrice).to.be.a('string');",
													"        pm.expect(tier.calculation).to.be.a('string');",
													"    });",
													"});",
													"",
													"",
													"pm.test(\"Tiers is an array with at least one element and validates its fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data.tiers).to.be.an('array').that.is.not.empty;",
													"",
													"    responseData.data.tiers.forEach(tier => {",
													"        pm.expect(tier).to.be.an('object');",
													"        pm.expect(tier.validityPeriod).to.exist.and.to.be.a('string');",
													"        pm.expect(tier.baseBundle).to.exist.and.to.be.a('string');",
													"        pm.expect(tier.baseValue).to.exist.and.to.be.a('string');",
													"        pm.expect(tier.markupPercent).to.exist.and.to.be.a('number');",
													"        pm.expect(tier.chargeablePrice).to.exist.and.to.be.a('string');",
													"        pm.expect(tier.calculation).to.exist.and.to.be.a('string');",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"ruleName\": \"{{$randomFullName}}\",\n  \"currency\": \"USD\",\n  \"description\": \"This rule defines tier-based pricing for premium subscriptions.\",\n  \"status\": \"inactive\", //active || inactive\n  \"tiers\": [\n    {\n      \"validityPeriod\": \"30 days\",\n      \"baseBundle\": \"Basic Plan\",\n      \"baseValue\": 100,\n      \"markupPercent\": 10\n    },\n    {\n      \"validityPeriod\": \"90 days\",\n      \"baseBundle\": \"Standard Plan\",\n      \"baseValue\": 250,\n      \"markupPercent\": 15\n    },\n    {\n      \"validityPeriod\": \"365 days\",\n      \"baseBundle\": \"Pro Plan\",\n      \"baseValue\": 900,\n      \"markupPercent\": 20\n    }\n  ]\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/payg/rules/{{rule_id}}?password=password",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"payg",
												"rules",
												"{{rule_id}}"
											],
											"query": [
												{
													"key": "password",
													"value": "password"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Deactivate Rule Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 400\", function () {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});",
													"",
													"",
													"pm.test(\"PAYG Rule deactivated successfully\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.message).to.eql(\"PAYG Rule is already inactive\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v1/payg/rules/{{rule_id}}/deactivate?password=password",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"payg",
												"rules",
												"{{rule_id}}",
												"deactivate"
											],
											"query": [
												{
													"key": "password",
													"value": "password"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"pm.test(\"PAYG Rule activated successfully\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.message).to.eql(\"PAYG Rule activated successfully\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Response has a success field that is true\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.success).to.be.true;",
													"});",
													"",
													"",
													"pm.test(\"Validate the schema of the data object\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.be.an('object');",
													"  ",
													"    pm.expect(responseData.data).to.have.all.keys('id', 'ruleName', 'currency', 'description', 'status', 'assignee', 'tiers', 'dateCreated', 'lastModified');",
													"",
													"    pm.expect(responseData.data.id).to.be.a('number');",
													"    pm.expect(responseData.data.ruleName).to.be.a('string');",
													"    pm.expect(responseData.data.currency).to.be.a('string');",
													"    pm.expect(responseData.data.description).to.be.a('string');",
													"    pm.expect(responseData.data.status).to.be.a('string');",
													"    pm.expect(responseData.data.assignee).to.satisfy(value => value === null || typeof value === 'string'); // Assignee can be null or a string",
													"    pm.expect(responseData.data.tiers).to.be.an('array');",
													"",
													"    responseData.data.tiers.forEach(tier => {",
													"        pm.expect(tier).to.be.an('object');",
													"        pm.expect(tier).to.have.all.keys('validityPeriod', 'baseBundle', 'baseValue', 'markupPercent', 'chargeablePrice', 'calculation');",
													"        ",
													"        pm.expect(tier.validityPeriod).to.be.a('string');",
													"        pm.expect(tier.baseBundle).to.be.a('string');",
													"        pm.expect(tier.baseValue).to.be.a('string');",
													"        pm.expect(tier.markupPercent).to.be.a('number');",
													"        pm.expect(tier.chargeablePrice).to.be.a('string');",
													"        pm.expect(tier.calculation).to.be.a('string');",
													"    });",
													"",
													"    pm.expect(responseData.data.dateCreated).to.be.a('string');",
													"    pm.expect(responseData.data.lastModified).to.be.a('string');",
													"});",
													"",
													"",
													"pm.test(\"The 'tiers' array contains at least one element with required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.have.property('data');",
													"    pm.expect(responseData.data).to.have.property('tiers').that.is.an('array').that.is.not.empty;",
													"",
													"    responseData.data.tiers.forEach(tier => {",
													"        pm.expect(tier).to.have.all.keys('validityPeriod', 'baseBundle', 'baseValue', 'markupPercent', 'chargeablePrice', 'calculation');",
													"    });",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v1/payg/rules/{{rule_id}}/activate?password=password",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"payg",
												"rules",
												"{{rule_id}}",
												"activate"
											],
											"query": [
												{
													"key": "password",
													"value": "password"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Assign Rule Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"",
													"",
													"",
													"",
													"",
													"pm.test(\"Response has required fields\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object').that.includes.all.keys('success', 'message', 'data');",
													"});",
													"",
													"",
													"pm.test(\"Validate the schema of the data object\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.be.an('object').that.includes.keys('ruleId', 'companyId', 'companyName', 'assignedAt');",
													"    ",
													"    pm.expect(responseData.data.ruleId).to.be.a('string');",
													"    pm.expect(responseData.data.companyId).to.be.a('number');",
													"    pm.expect(responseData.data.companyName).to.be.a('string');",
													"    pm.expect(responseData.data.assignedAt).to.be.a('string');",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"companyId\": 12\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/payg/rules/{{rule_id}}/assign?password=password",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"payg",
												"rules",
												"{{rule_id}}",
												"assign"
											],
											"query": [
												{
													"key": "password",
													"value": "password"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Unassign Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 200\", function () {",
													"    pm.expect(pm.response.code).to.eql(200);",
													"});",
													"",
													"",
													"pm.test(\"Response contains 'success' field and it is true\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('success', true);",
													"});",
													"",
													"",
													"pm.test(\"Validate the schema of the data object for required fields\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.data).to.exist.and.to.be.an('object');",
													"    pm.expect(responseData.data).to.have.all.keys('ruleId', 'unassignedCompany', 'unassignedAt');",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/payg/rules/{{rule_id}}/unassign?password=password",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"payg",
												"rules",
												"{{rule_id}}",
												"unassign"
											],
											"query": [
												{
													"key": "password",
													"value": "password"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Rule",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"",
													"pm.test(\"Response contains a success field of type boolean\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData).to.have.property('success').that.is.a('boolean');",
													"});",
													"",
													"",
													"pm.test(\"The message field must be a string\", function () {",
													"    const responseData = pm.response.json();",
													"    ",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.message).to.be.a('string');",
													"});",
													"",
													"",
													"pm.test(\"PAYG Rule deleted successfully\", function () {",
													"    const response = pm.response.json();",
													"    pm.expect(response.message).to.eql(\"PAYG Rule deleted successfully\");",
													"});",
													"",
													"",
													"",
													"pm.test(\"Success field should be true when deletion is successful\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(responseData).to.be.an('object');",
													"    pm.expect(responseData.success).to.equal(true);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{BASE_URL}}/api/v1/payg/rules/{{rule_id}}",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"payg",
												"rules",
												"{{rule_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Customer Devices",
							"item": [
								{
									"name": "Get Devices",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Postman Test Script for Audit Trail API Response",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response should be JSON\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Response should contain success: true\", function () {",
													"    pm.expect(jsonData).to.have.property(\"success\", true);",
													"});",
													"",
													"pm.test(\"Response should have a message\", function () {",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.equal(\"Devices\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/api/v1/devices",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"devices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Expire",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Device Expiry set successfully\");\r",
													"});\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"expiry\" : \"2025-05-18 17:00:00\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/devices/expire/3",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"devices",
												"expire",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unlock Device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Device unlocked successfully\");\r",
													"});\r",
													"pm.test(\"Response time is less than 2000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/devices/unlock/12?password=password",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"devices",
												"unlock",
												"12"
											],
											"query": [
												{
													"key": "password",
													"value": "password"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Lock Device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Device locked successfully\");\r",
													"});\r",
													"pm.test(\"Response time is less than 5000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {},
												"requests": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/devices/lock/12?password=password",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"devices",
												"lock",
												"12"
											],
											"query": [
												{
													"key": "password",
													"value": "password"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Device",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Postman Test Script for Audit Trail API Response",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response should be JSON\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Response should contain success: true\", function () {",
													"    pm.expect(jsonData).to.have.property(\"success\", true);",
													"});",
													"",
													"pm.test(\"Response should have a message\", function () {",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.equal(\"Device Updated successfully\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"serial_number\" : \"5083560347\",\n    \"imei\" : \"863141070070188\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{BASE_URL}}/api/v1/devices/update/12",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"devices",
												"update",
												"12"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Device Details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Postman Test Script for Audit Trail API Response",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response should be JSON\", function () {",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.test(\"Response should contain success: true\", function () {",
													"    pm.expect(jsonData).to.have.property(\"success\", true);",
													"});",
													"",
													"pm.test(\"Response should have a message\", function () {",
													"    pm.expect(jsonData).to.have.property(\"message\");",
													"    pm.expect(jsonData.message).to.equal(\"Device Details\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/api/v1/devices/2",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"devices",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Download Device Logs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Postman Test Script for Audit Trail API Response",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "X-Client-Key",
												"value": "OLWqw5zhbwHjnLxyTWxNDEhTOSZBDHWhV",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{BASE_URL}}/api/v1/devices/download",
											"host": [
												"{{BASE_URL}}"
											],
											"path": [
												"api",
												"v1",
												"devices",
												"download"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Subscriber Overview",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"pm.test(\"Validate the structure of the data object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.an('object').that.includes.all.keys(",
											"        'totalActiveSubscriptions', ",
											"        'totalActiveSubscriptionValue', ",
											"        'totalExpiredSubscriptions', ",
											"        'totalExpiredSubscriptionValue', ",
											"        'totalRepaidSubscriptions', ",
											"        'totalRepaidSubscriptionValue'",
											"    );",
											"",
											"    pm.expect(responseData.data.totalActiveSubscriptions).to.be.a('number');",
											"    pm.expect(responseData.data.totalExpiredSubscriptions).to.be.a('number');",
											"    pm.expect(responseData.data.totalRepaidSubscriptions).to.be.a('number');",
											"    pm.expect(responseData.data.totalActiveSubscriptionValue).to.be.a('string');",
											"    pm.expect(responseData.data.totalExpiredSubscriptionValue).to.be.a('string');",
											"    pm.expect(responseData.data.totalRepaidSubscriptionValue).to.be.a('string');",
											"});",
											"",
											"",
											"pm.test(\"All numeric fields in the response are non-negative integers\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data.totalActiveSubscriptions).to.be.a('number').and.to.be.at.least(0);",
											"    pm.expect(responseData.data.totalExpiredSubscriptions).to.be.a('number').and.to.be.at.least(0);",
											"    pm.expect(responseData.data.totalRepaidSubscriptions).to.be.a('number').and.to.be.at.least(0);",
											"});",
											"",
											"",
											"pm.test(\"Success should be a boolean value\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/payg/subscribers/dashboard",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"payg",
										"subscribers",
										"dashboard"
									]
								}
							},
							"response": []
						},
						{
							"name": "Subscriber List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"",
											"",
											"pm.test(\"Validate the schema of the response object\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('success', 'message', 'currentPage', 'hasMorePages', 'lastPage', 'nextPageUrl', 'perPage', 'previousPageUrl', 'total', 'url', 'data');",
											"    ",
											"    pm.expect(responseData.success).to.be.a('boolean');",
											"    pm.expect(responseData.message).to.be.a('string');",
											"    pm.expect(responseData.currentPage).to.be.a('number');",
											"    pm.expect(responseData.hasMorePages).to.be.a('boolean');",
											"    pm.expect(responseData.lastPage).to.be.a('number');",
											"    pm.expect(responseData.nextPageUrl).to.satisfy(url => url === null || typeof url === 'string');",
											"    pm.expect(responseData.perPage).to.be.a('number');",
											"    pm.expect(responseData.previousPageUrl).to.satisfy(url => url === null || typeof url === 'string');",
											"    pm.expect(responseData.total).to.be.a('number');",
											"    pm.expect(responseData.url).to.be.a('string');",
											"    pm.expect(responseData.data).to.be.an('array');",
											"});",
											"",
											"",
											"pm.test(\"Response contains required fields\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData).to.have.all.keys('success', 'message', 'currentPage', 'hasMorePages', 'lastPage', 'nextPageUrl', 'perPage', 'previousPageUrl', 'total', 'url', 'data');",
											"});",
											"",
											"",
											"pm.test(\"Data field is an empty array\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData).to.be.an('object');",
											"    pm.expect(responseData.data).to.be.an('array').that.is.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{BASE_URL}}/api/v1/payg/subscribers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"payg",
										"subscribers"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "token",
			"value": "",
			"type": "default"
		},
		{
			"key": "BASE_URL",
			"value": "https://api.rodiall.com",
			"type": "default"
		}
	]
}